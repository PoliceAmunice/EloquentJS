/**
 * Прототипирование объектов в JS – это реализация концепции ООП, называемой классами.
 * Если обычно создаём класс, описывающий общие для сущности свойства, а затем создаём
 * его экземпляры с последующей спецификацией, то в JS мы создаём прототип и наследуем 
 * от него новые объекты.
 */

// Реализация конструктора с нуля на основе вышесказанного (+ Prototypes.js)
function construct(type) {
	const rabbit = Object.create(Rabbit);
	rabbit.type = type;
	return rabbit;
}

// Тот же конструктор старым движком JS
function Rabbit(type) {
	this.type = type;
}
// Определение свойств прототипа происходит путем получения свойства prototype функции-конструктора
Rabbit.prototype.speak = function(speach) { //а стрелка не увидит this
	console.log(`${this.type} rabbit says: ${speach}`);
}

// Использование ключ. слова new при вызове функции будет интерпретировано,
// как вызов конструктора для нового экземпляра указанного прототипа.
const killerRabbit = new Rabbit('Killer');

killerRabbit.speak("I'll figure it out");

// Таким образом, класс реализован с помощью функции-конструктора со свойством prototype,
// содержащим все методы/свойства прототипа